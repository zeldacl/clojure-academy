buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "clojars"
            url = "http://clojars.org/repo/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        //maven {
        //    name = "gradleplugins"
        //    url = "https://plugins.gradle.org/m2/"
        //}
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        //classpath 'com.github.jochenberger:gradle-lein:0.0.1'
        dependencies { classpath "clojuresque:clojuresque:1.7.0" }
    }
}

apply plugin: "clojure"
clojure.aotCompile = true
clojure.warnOnReflection = true

repositories {
    flatDir dirs: project.file("lib/runtime")
}

//apply plugin: "com.github.jochenberger.lein"

apply plugin: 'forge'



version = "1.0"
group= "com.li.clojureacademy" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "clojureacademy"

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    runDir = "eclipse"
}



dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "org.clojure:clojure:1.6.0"
    //compile "clojure-complete:clojure-complete:0.2.3"
    compile "org.clojure:tools.logging:0.3.0"
    compile 'org.lwjgl.lwjgl:lwjgl:2.9.1'

    compile files('cn/li/academy/block/tileentity/TileEntityInventory.clj')

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
